<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nodejs on 云亦海</title>
    <link>https://gerrywp.github.io/blog/tags/nodejs/</link>
    <description>Recent content in nodejs on 云亦海</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 16 Aug 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://gerrywp.github.io/blog/tags/nodejs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>nodejs之旅(6)热替换与热加载</title>
      <link>https://gerrywp.github.io/blog/post/180816jsjourney6/</link>
      <pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://gerrywp.github.io/blog/post/180816jsjourney6/</guid>
      <description>&lt;p&gt;　　在开发阶段，我们希望每次更改了代码后页面立即做出相应改变，这种方式在webpack里面叫做
&lt;strong&gt;热替换HMR&lt;/strong&gt;(hot module replacement)!在react开发中，希望每次更改代码的时候不要刷新整个页面，而是让网页中的React组件渲染代码替换成新的代码。这种方式就叫做热加载(hot load)。本文不使用&lt;code&gt;webpack-dev-server&lt;/code&gt;的&lt;strong&gt;hot&lt;/strong&gt;模式，
而是在自己搭建的expressjs服务器上，实现热更新和react组件的热加载！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nodejs之旅(5)-form表单</title>
      <link>https://gerrywp.github.io/blog/post/180813jsjourney5/</link>
      <pubDate>Mon, 13 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://gerrywp.github.io/blog/post/180813jsjourney5/</guid>
      <description>&lt;p&gt;　　在web开发中，最重要的数据交互方式首推就该属表单了。html通过表单实现了客户端与服务器端数据的交互。谈及表单就不得不说&lt;code&gt;MIME&lt;/code&gt;类型，此类型
关系到服务器端和浏览器端处理数据的方式和手段！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nodejs之旅(4)-webpack、babel和antd库的结合</title>
      <link>https://gerrywp.github.io/blog/post/180619jsjourney4/</link>
      <pubDate>Tue, 19 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://gerrywp.github.io/blog/post/180619jsjourney4/</guid>
      <description>&lt;p&gt;　　前端(browser)模块性的开发，目前来说就不得不用到webpack(module bundle)打包工具。因为使用了react的&lt;code&gt;JSX&lt;/code&gt;语法，所以必须要用到babel进行转码,因为browser是不认识&lt;code&gt;JSX&lt;/code&gt;语法的。并且由于目前大部分的浏览器对ES6语法(例如：&lt;code&gt;import&lt;/code&gt;和&lt;code&gt;export&lt;/code&gt;等语法并不支持)，也必须用到babel对这类型新的ES6语法进行转码。鉴于前端技术发展的太快了，在此只做基本使用理念的介绍，不对细节做过多的处理！具体的各工具的使用，以在线参考文档为主！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nodejs之旅(3)-gulp及调试</title>
      <link>https://gerrywp.github.io/blog/post/180617jsjourney3/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://gerrywp.github.io/blog/post/180617jsjourney3/</guid>
      <description>&lt;p&gt;　　gulp通过任务的形式来完成前端的构建，如何调试？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>apache反向代理nodejs-web</title>
      <link>https://gerrywp.github.io/blog/post/180402deploy/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://gerrywp.github.io/blog/post/180402deploy/</guid>
      <description>&lt;p&gt;　　将nodejs-web站点部署到linux服务器上如何反向代理？应用程序运行在3000端口，通过域名访问！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nodejs如何创建单例实例</title>
      <link>https://gerrywp.github.io/blog/post/180329singletoninnodejs/</link>
      <pubDate>Thu, 29 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://gerrywp.github.io/blog/post/180329singletoninnodejs/</guid>
      <description>&lt;p&gt;　　How to create singleton in Node.js?这个问题实际是错误的！因为nodejs模块缓存的原因，require(&amp;ldquo;)每次出来的都是单例的！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nodejs之旅(2)</title>
      <link>https://gerrywp.github.io/blog/post/180327jsjourney2/</link>
      <pubDate>Tue, 27 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://gerrywp.github.io/blog/post/180327jsjourney2/</guid>
      <description>&lt;p&gt;　　express-handlebars服务端模板引擎的局部渲染。非SPA应用程序，在最原始的动态页面并使用了layout布局的情况下，
我们通常希望能够将index.hbs里面的UI结构和js逻辑部分组合在一起，并且需要将js逻辑统一放置到layout布局页的最底部。
handlebars的&lt;strong&gt;Block Helper&lt;/strong&gt;能够帮我们解决这个问题！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nodejs之旅(1)</title>
      <link>https://gerrywp.github.io/blog/post/180322jsjourney1/</link>
      <pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://gerrywp.github.io/blog/post/180322jsjourney1/</guid>
      <description>&lt;p&gt;　　这个系列会一步一步开始使用expressjs+nodejs搭建一个游戏背景音乐在线听网站。从零开始记录每一个细节：包括IDE工具使用细节、环境配置细节、expressjs
配置细节等等。目的只是为了单纯的练习和使用expressjs+nodejs，在摸索中前进！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>前端那些事儿</title>
      <link>https://gerrywp.github.io/blog/post/171124fullstack/</link>
      <pubDate>Fri, 24 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gerrywp.github.io/blog/post/171124fullstack/</guid>
      <description>&lt;p&gt;　　微软系软件开发使用的Visual Studio(VS) IDE强大到令人发指！隐藏了许多技术细节，必然很难定制。nodejs出现之前，创建一个asp.net mvc的项目，client(browser)和server(csharp+iis)是组织在一起的。很少有公司在做asp.net mvc项目的时候会定制msbuild去完成浏览器端代码的构建和发布，比如：
打包压缩js+css文件,拷贝文件到指定的dist目录,修改view或html文件中的js、css引用路径给路径添加上hash码，同时也拷贝到dist目录。但是通常情况下都是使用的IDE自动构建和一键式发布来deploy website应用。这种情况下想实现client端和server端的分而治之，压根是不可能实现的。nodejs的出现彻底改变了这一现状！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title> windows环境下node.exe配置</title>
      <link>https://gerrywp.github.io/blog/post/161223node1/</link>
      <pubDate>Fri, 23 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://gerrywp.github.io/blog/post/161223node1/</guid>
      <description>&lt;p&gt;node.exe-nodejs的可执行环境，其实仅仅只依靠&lt;strong&gt;node.exe&lt;/strong&gt;这个可执行文件就可以了。&lt;strong&gt;npm&lt;/strong&gt;只不过是运行于&lt;strong&gt;node.exe&lt;/strong&gt;环境中的「包管理程序」。
那么windows下node是如何加载模块的，npm是如何管理包的？&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>